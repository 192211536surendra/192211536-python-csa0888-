def generateParentheses(n):
    def backtrack(s, left, right):
        if len(s) == 2 * n:
            result.append(s)
            return
        if left < n:
            backtrack(s + '(', left + 1, right)
        if right < left:
            backtrack(s + ')', left, right + 1)

    if n <= 0:
        return []

    result = []
    backtrack('', 0, 0)
    return result

# Test cases
print(generateParentheses(3))  # Output: ["((()))","(()())","(())()","()(())","()()()"]
print(generateParentheses(1))  # Output: ["()"]
print(generateParentheses(5))  # Output will be a list of strings representing well-formed parentheses combinations.
print(generateParentheses(-1)) # Output: []
print(generateParentheses(0))  # Output: []
